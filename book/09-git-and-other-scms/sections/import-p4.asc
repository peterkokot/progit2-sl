[[r_perforce_import]]
==== Perforce

(((Perforce)))(((Importing, from Perforce)))

Naslednji sistem, ki ga boste pogledali pri uvažanju je Perforce.
Kot smo govorili zgoraj, sta dva načina, da omogočimo Git-u in Perforce-u govoriti drug z drugim: git-p4 in Perforce Git Fusion.

===== Perforce Git Fusion

Git Fusion naredi ta proces precej neboleč.
Samo nastavite nastavitve vašega projekta, preslikave uporabnika in veje, ki uporabljajo nastavitveno datoteko (kot je povedano v <<r_p4_git_fusion>> in klonirajte repozitorij.
Git Fusion vas pusti z nečim, kar izgleda kot materni repozitorij Git, ki je nato pripravljen za potiskanje na materni gostitelj Gi, če želite.
Lahko bi celo uporabili Perforce kot vašega gostitelja Git-a, če želite.

[[r_git_p4]]
===== Git-p4

Git-p4 se lahko obnaša tudi kot uvozno orodje.
Kot primer, bomo uvozili projekt Jam iz Perforce javnega depot-a.
Da nastavite vašega klienta, morate izvoziti okoljsko spremenljivko P4PORT, da kaže na Perforce depot:

[source,console]
----
$ export P4PORT=public.perforce.com:1666
----

[NOTE]
====
Da zrave sledite, boste potrebovali Perforce depot za povezavo.
Uporabljali bomo javni depot na public.perforce.com za naš primer, vendar lahko uporabite katerikoli drugi depot, do katerega imate dostop.
====

(((git commands, p4)))
Poženite ukaz `git p4 clone`, da uvozite projekt Jam iz strežnika Perforce, kar dobavlja depot in pot projekta ter pot v katero želite uvoziti projekt:

[source,console]
----
$ git-p4 clone //guest/perforce_software/jam@all p4import
Importing from //guest/perforce_software/jam@all into p4import
Initialized empty Git repository in /private/tmp/p4import/.git/
Import destination: refs/remotes/p4/master
Importing revision 9957 (100%)
----

Ta določen projekt ima samo eno vejo vendar če imate veje, ki so nastavljive s pogledi vej (ali samo skupkom direktorijev), lahko uporabite zastavico `--detect-branches` na `git p4 clone`, da uvozite tudi vse veje projekta.
Glejte <<r_git_p4_branches>> za nekoliko več podrobnosti o tem.

Na tej točki ste že skoraj končali.
Če greste v direktorij `p4import` in poženete `git log`, lahko vidite vaše uvoženo delo:

[source,console]
----
$ git log -2
commit e5da1c909e5db3036475419f6379f2c73710c4e6
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

    [git-p4: depot-paths = "//public/jam/src/": change = 8068]

commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).

    [git-p4: depot-paths = "//public/jam/src/": change = 7304]
----

Vidite lahko, da je `git-p4` pustil identifikator v vsakem sporočilu pošiljanja.
V redu je obdržati ta identifikator tam v primeru, če se potrebujete sklicevati na Perforce število spremembe kasneje.
Vendar, če želite odstraniti identifikator je to sedaj čas, da naredite - preden začnete delati delo na novem repozitoriju.
(((git commands, filter-branch)))
Lahko uporabite `git filter-branc`, da odstranite nize identifikatorja v celoti:

[source,console]
----
$ git filter-branch --msg-filter 'sed -e "/^\[git-p4:/d"'
Rewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125)
Ref 'refs/heads/master' was rewritten
----

Če poženete `git log` lahko vidite, da so bile vse preverjene vsote SHA-1 za pošiljanja spremenjene vendar nizi `git-p4` niso več v sporočilih pošiljanja:

[source,console]
----
$ git log -2
commit b17341801ed838d97f7800a54a6f9b95750839b7
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).
----

Vaš uvoz je sedaj pripravljen potisniti na vaš novi strežnik Git.
