[[r_git_aliases]]
=== Git aliasi

(((aliases)))
Preden končamo to poglavje o osnovah Git-a, je samo še en manjši napotek, ki lahko naredi vašo Git izkušnjo enostavnejši, lažjo in bolj znano: aliasi.
Ne bomo se sklicevali nanje ali sklepali, da ste jih uporabljali kasneje v knjigi, vendar bi verjetno morali vedeti, kako jih uporabljati.

Git avtomatsko ne sklepa na podlagi vašega ukaza, če ga vpišete parcialno.
Če ne želite vpisovati celotnega teksta vsakega ukaza Git, lahko enostavno nastavite alias za vsak ukaz z uporabo `git config`. (((git commands, config)))
Tu je nekaj primerov, ki jih morda želite nastaviti:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

To pomeni, da na primer namesto, da vpisujete `git commit`, morate samo vpisati `git ci`.
Ko nadaljujete z uporabo Git-a, boste verjetno pogosto uporabljali tudi ostale ukaze; ne čakajte z izdelavo novih aliasov.

Ta tehnika je lahko zelo uporabna pri izdelavi ukazov, za katere smatrate, da bi morali obstajati.
Na primer, da popravite uporabnost problema, na katerega ste naleteli z dajanjem datoteke izven vmesne faze, lahko dodate vaš lasten alias za dajanje izven vmesne faze Git-u:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

To naredi sledeča ukaza ekvivalentna temu:

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

To izgleda bolj jasno.
Je tudi skupno dodati ukaz `last` sledeče:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Na ta način, lahko vidite zadnje pošiljanje ensotavno:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Kot lahko poveste, Git enostavno zamenja nov ukaz s čimerkoli kar nastavite alias zanj.
Vendar morda boste želeli pognati zunanji ukaz namesto podukaza Git.
V tem primeru začnete ukaz z znakom `!`.
To je uporabno, če pišete vaša lastna orodja, ki delajo z repozitorijem Git.
Demonstriramo lahko z dodajanjem aliasa `git visual`, da požene `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
